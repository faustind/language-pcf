{- List -}

-- List indexing
let rec indx xs n 
  = if iszero n 
      then head xs 
      else (indx (tail xs) (n-1));

-- applies a function to elements of a list
let rec map f xs
  = if null xs
      then []
      else cons (f (head xs)) (map f (tail xs));


{- Pairs. -}

let Pair x y = [x, y];
let fst  p   = head p;
let snd  p   = head (tail p);

{- Arithmetic -}
-- WARNING: extremely inefficient.
let rec mult x y
  = if iszero y
       then 0
       else (mult x (y-1)) + x;

let rec fact n
  = if iszero n
      then 1
      else mult n (fact (n-1));

{- Logic -}

let not p   = if p then false else true;
let and x y = if x then (if y then true else false) else false;
let or  x y = if x then true else (if y then true else false);
let xor x y = or (and x (not y)) (and (not x) y);

-- eq works only on naturals
let eq  a b = and (iszero (a-b)) (iszero (b-a));

